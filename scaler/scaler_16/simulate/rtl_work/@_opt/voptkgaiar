library verilog;
use verilog.vl_types.all;
entity M7S_EMB18K is
    generic(
        width_ext_mode  : vl_logic := Hi0;
        depth_ext_mode  : vl_logic := Hi0;
        dedicated_cfg   : vl_logic_vector(0 to 15) := (Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1);
        fifo_en         : vl_logic := Hi0;
        async_en        : vl_logic := Hi0;
        r_width         : vl_logic_vector(0 to 4) := (Hi0, Hi0, Hi0, Hi0, Hi0);
        w_width         : vl_logic_vector(0 to 4) := (Hi0, Hi0, Hi0, Hi0, Hi0);
        af_level        : vl_logic_vector(0 to 14) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        ae_level        : vl_logic_vector(0 to 14) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_1_modea_sel: vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi0);
        emb5k_1_modeb_sel: vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi0);
        emb5k_1_porta_wr_mode: vl_logic_vector(0 to 1) := (Hi0, Hi0);
        emb5k_1_portb_wr_mode: vl_logic_vector(0 to 1) := (Hi0, Hi0);
        emb5k_1_porta_reg_out: vl_logic := Hi0;
        emb5k_1_portb_reg_out: vl_logic := Hi0;
        emb5k_1_reset_value_a: vl_logic_vector(0 to 8) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_1_reset_value_b: vl_logic_vector(0 to 8) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_1_operation_mode: string  := "simple_dual_port";
        emb5k_1_porta_data_width: integer := 18;
        emb5k_1_portb_data_width: integer := 18;
        emb5k_1_init_file: string  := " ";
        emb5k_1_porta_prog: vl_logic_vector(0 to 7) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_1_portb_prog: vl_logic_vector(0 to 7) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_2_modea_sel: vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi0);
        emb5k_2_modeb_sel: vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi0);
        emb5k_2_porta_wr_mode: vl_logic_vector(0 to 1) := (Hi0, Hi0);
        emb5k_2_portb_wr_mode: vl_logic_vector(0 to 1) := (Hi0, Hi0);
        emb5k_2_porta_reg_out: vl_logic := Hi0;
        emb5k_2_portb_reg_out: vl_logic := Hi0;
        emb5k_2_reset_value_a: vl_logic_vector(0 to 8) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_2_reset_value_b: vl_logic_vector(0 to 8) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_2_operation_mode: string  := "simple_dual_port";
        emb5k_2_porta_data_width: integer := 18;
        emb5k_2_portb_data_width: integer := 18;
        emb5k_2_init_file: string  := " ";
        emb5k_2_porta_prog: vl_logic_vector(0 to 7) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_2_portb_prog: vl_logic_vector(0 to 7) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_3_modea_sel: vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi0);
        emb5k_3_modeb_sel: vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi0);
        emb5k_3_porta_wr_mode: vl_logic_vector(0 to 1) := (Hi0, Hi0);
        emb5k_3_portb_wr_mode: vl_logic_vector(0 to 1) := (Hi0, Hi0);
        emb5k_3_porta_reg_out: vl_logic := Hi0;
        emb5k_3_portb_reg_out: vl_logic := Hi0;
        emb5k_3_reset_value_a: vl_logic_vector(0 to 8) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_3_reset_value_b: vl_logic_vector(0 to 8) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_3_operation_mode: string  := "simple_dual_port";
        emb5k_3_porta_data_width: integer := 18;
        emb5k_3_portb_data_width: integer := 18;
        emb5k_3_init_file: string  := " ";
        emb5k_3_porta_prog: vl_logic_vector(0 to 7) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_3_portb_prog: vl_logic_vector(0 to 7) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_4_modea_sel: vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi0);
        emb5k_4_modeb_sel: vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi0);
        emb5k_4_porta_wr_mode: vl_logic_vector(0 to 1) := (Hi0, Hi0);
        emb5k_4_portb_wr_mode: vl_logic_vector(0 to 1) := (Hi0, Hi0);
        emb5k_4_porta_reg_out: vl_logic := Hi0;
        emb5k_4_portb_reg_out: vl_logic := Hi0;
        emb5k_4_reset_value_a: vl_logic_vector(0 to 8) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_4_reset_value_b: vl_logic_vector(0 to 8) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_4_operation_mode: string  := "simple_dual_port";
        emb5k_4_porta_data_width: integer := 18;
        emb5k_4_portb_data_width: integer := 18;
        emb5k_4_init_file: string  := " ";
        emb5k_4_porta_prog: vl_logic_vector(0 to 7) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_4_portb_prog: vl_logic_vector(0 to 7) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        emb5k_1_inst    : string  := "NONE";
        emb5k_2_inst    : string  := "NONE";
        emb5k_3_inst    : string  := "NONE";
        emb5k_4_inst    : string  := "NONE"
    );
    port(
        wfull           : out    vl_logic;
        wfull_almost    : out    vl_logic;
        rempty          : out    vl_logic;
        rempty_almost   : out    vl_logic;
        overflow        : out    vl_logic;
        wr_ack          : out    vl_logic;
        underflow       : out    vl_logic;
        rd_ack          : out    vl_logic;
        rd_ha           : out    vl_logic_vector(1 downto 0);
        rd_la           : out    vl_logic_vector(5 downto 0);
        c1r4_q          : out    vl_logic_vector(17 downto 0);
        c1r3_q          : out    vl_logic_vector(17 downto 0);
        c1r2_q          : out    vl_logic_vector(17 downto 0);
        c1r1_q          : out    vl_logic_vector(17 downto 0);
        c1r4_aa         : in     vl_logic_vector(11 downto 0);
        c1r4_ab         : in     vl_logic_vector(11 downto 0);
        c1r4_cea        : in     vl_logic;
        c1r4_ceb        : in     vl_logic;
        c1r4_clka       : in     vl_logic;
        c1r4_clkb       : in     vl_logic;
        c1r4_da         : in     vl_logic_vector(17 downto 0);
        c1r4_db         : in     vl_logic_vector(17 downto 0);
        c1r4_rstna      : in     vl_logic;
        c1r4_rstnb      : in     vl_logic;
        c1r4_wea        : in     vl_logic;
        c1r4_web        : in     vl_logic;
        c1r3_aa         : in     vl_logic_vector(11 downto 0);
        c1r3_ab         : in     vl_logic_vector(11 downto 0);
        c1r3_cea        : in     vl_logic;
        c1r3_ceb        : in     vl_logic;
        c1r3_clka       : in     vl_logic;
        c1r3_clkb       : in     vl_logic;
        c1r3_da         : in     vl_logic_vector(17 downto 0);
        c1r3_db         : in     vl_logic_vector(17 downto 0);
        c1r3_rstna      : in     vl_logic;
        c1r3_rstnb      : in     vl_logic;
        c1r3_wea        : in     vl_logic;
        c1r3_web        : in     vl_logic;
        c1r2_aa         : in     vl_logic_vector(11 downto 0);
        c1r2_ab         : in     vl_logic_vector(11 downto 0);
        c1r2_cea        : in     vl_logic;
        c1r2_ceb        : in     vl_logic;
        c1r2_clka       : in     vl_logic;
        c1r2_clkb       : in     vl_logic;
        c1r2_da         : in     vl_logic_vector(17 downto 0);
        c1r2_db         : in     vl_logic_vector(17 downto 0);
        c1r2_rstna      : in     vl_logic;
        c1r2_rstnb      : in     vl_logic;
        c1r2_wea        : in     vl_logic;
        c1r2_web        : in     vl_logic;
        c1r1_aa         : in     vl_logic_vector(11 downto 0);
        c1r1_ab         : in     vl_logic_vector(11 downto 0);
        c1r1_cea        : in     vl_logic;
        c1r1_ceb        : in     vl_logic;
        c1r1_clka       : in     vl_logic;
        c1r1_clkb       : in     vl_logic;
        c1r1_da         : in     vl_logic_vector(17 downto 0);
        c1r1_db         : in     vl_logic_vector(17 downto 0);
        c1r1_rstna      : in     vl_logic;
        c1r1_rstnb      : in     vl_logic;
        c1r1_wea        : in     vl_logic;
        c1r1_web        : in     vl_logic;
        cea             : in     vl_logic;
        ceb             : in     vl_logic;
        fifo_clr        : in     vl_logic;
        wr_req_n        : in     vl_logic;
        rd_req_n        : in     vl_logic;
        haa             : in     vl_logic_vector(1 downto 0);
        hab             : in     vl_logic_vector(1 downto 0);
        wea             : in     vl_logic;
        web             : in     vl_logic
    );
    attribute mti_svvh_generic_type : integer;
    attribute mti_svvh_generic_type of width_ext_mode : constant is 1;
    attribute mti_svvh_generic_type of depth_ext_mode : constant is 1;
    attribute mti_svvh_generic_type of dedicated_cfg : constant is 1;
    attribute mti_svvh_generic_type of fifo_en : constant is 1;
    attribute mti_svvh_generic_type of async_en : constant is 1;
    attribute mti_svvh_generic_type of r_width : constant is 1;
    attribute mti_svvh_generic_type of w_width : constant is 1;
    attribute mti_svvh_generic_type of af_level : constant is 1;
    attribute mti_svvh_generic_type of ae_level : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_modea_sel : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_modeb_sel : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_porta_wr_mode : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_portb_wr_mode : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_porta_reg_out : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_portb_reg_out : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_reset_value_a : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_reset_value_b : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_operation_mode : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_porta_data_width : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_portb_data_width : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_init_file : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_porta_prog : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_portb_prog : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_modea_sel : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_modeb_sel : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_porta_wr_mode : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_portb_wr_mode : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_porta_reg_out : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_portb_reg_out : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_reset_value_a : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_reset_value_b : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_operation_mode : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_porta_data_width : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_portb_data_width : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_init_file : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_porta_prog : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_portb_prog : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_modea_sel : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_modeb_sel : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_porta_wr_mode : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_portb_wr_mode : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_porta_reg_out : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_portb_reg_out : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_reset_value_a : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_reset_value_b : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_operation_mode : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_porta_data_width : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_portb_data_width : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_init_file : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_porta_prog : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_portb_prog : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_modea_sel : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_modeb_sel : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_porta_wr_mode : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_portb_wr_mode : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_porta_reg_out : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_portb_reg_out : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_reset_value_a : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_reset_value_b : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_operation_mode : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_porta_data_width : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_portb_data_width : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_init_file : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_porta_prog : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_portb_prog : constant is 1;
    attribute mti_svvh_generic_type of emb5k_1_inst : constant is 1;
    attribute mti_svvh_generic_type of emb5k_2_inst : constant is 1;
    attribute mti_svvh_generic_type of emb5k_3_inst : constant is 1;
    attribute mti_svvh_generic_type of emb5k_4_inst : constant is 1;
end M7S_EMB18K;

/*
	开发者：林竞豪，张惠迪,陈天翼
*/

/*
	工作日志
	
	2014/12/20
		修改了逻辑，当输入两行数据未利用完时，全部由计算单元内部进行数据读取与控制
		为此增添了输出纵向分辨率ouNxtpuNxt_y_width，用于记录算到第几行
		
	2014/12/23
		将ouNxtpuNxt_y_width改为yAddress
		
	2014/12/27
		增加了一帧计算完后的外部控制信号frameFin
		
	2015/1/1
		注释掉了generate的冗长语句，资源占用大幅降低

	2015/1/3
		frameFin由输入变为输出
		删掉输出地址ouNxtAddress
		增加输出行、场同步信号 
		
	2015/2/10
		根据报告修改了输入输出端口的名字
		对原算法再次进行了simulation
	
	2015/2/12
		忘记备份原来的算法了
		写完新方案里放大部分的代码
		未进行仿真
	
	2015/2/15
		仿真失败
		WTF
		
	2015/2/16
		Ready to die = =
	2015/4/11
		修正reg、wire的误用
		完成FIFO版本模式0工作
*/



module Cal#(
	//可修改参数
	parameter DATA_WIDTH    = 16,
	parameter ADDRESS_WIDTH = 11,
	parameter NUM_WIDTH     = 8,
	parameter FRACTION_WIDTH= 6,
	parameter BUFFER_SIZE	= 2,
	//不可修改参数
	parameter R_WIDTH      	= (DATA_WIDTH==16)?5:(DATA_WIDTH==24)?8:0,
	parameter G_WIDTH      	= (DATA_WIDTH==16)?6:(DATA_WIDTH==24)?8:0,
	parameter B_WIDTH      	= (DATA_WIDTH==16)?5:(DATA_WIDTH==24)?8:0,
	parameter CAL_WIDTH		= ADDRESS_WIDTH + FRACTION_WIDTH,
	parameter INT_WIDTH		= CAL_WIDTH-FRACTION_WIDTH
	parameter KINT_WIDTH	= NUM_WIDTH-FRACTION_WIDTH
	)
(   //输入
    input wire clk,
	input wire rst,
	//来自inpuNxtCtrl
	input wire [ADDRESS_WIDTH-1:0]	ramAddrIn,			//inputCtrl写入ram的地址
	//来自RAMFIFO
	input wire [DATA_WIDTH-1:0]		ramData00,ramData01,
									ramData10,ramData11,//从ram里读取的数据值
	input wire [BUFFER_SIZE-1:0]   	fifoNum,			//FIFO中剩余的行数
	//来自coefCal
	input wire [NUM_WIDTH-1:0]    	kX,kY,				//横纵放大倍数的倒数
	input wire [ADDRESS_WIDTH-1:0]	inXNum,				//输入列数（xBgn-xEnd）
	input wire [ADDRESS_WIDTH-1:0]	inYNum,				//输入行数（yBgn-yEnd)
    input wire [ADDRESS_WIDTH-1:0]	outXRes,			//告知输出列数
	input wire [ADDRESS_WIDTH-1:0]	outYRes,			//告知输出行数
	
	//输出
	//输出至下一级
	output reg HS,				//输出行同步信号
	output reg VS,				//输出场同步信号
	output wire dOutEn,			//输出点同步信号
	//连接至ramFIFO
	output reg jmp1,jmp2,		//输出至ramfifo
	output wire [ADDRESS_WIDTH-1:0] ramRdAddr00,ramRdAddr01,
									ramRdAddr10,ramRdAddr11,//读取ram的地址
    output wire [DATA_WIDTH-1:0]    dOut					//每个输出像素的数值
);
reg  [CAL_WIDTH-1:0]	u;  		//对应双线性插值算法中u值
reg [CAL_WIDTH-1:0]		uPre;		//暂存u-kx,上一时刻的u值
wire [CAL_WIDTH-1:0]	uNxt=u+kX;	//暂存u+kx，下一时刻给到u
wire [INT_WIDTH-1:0]	uI=u[INT_WIDTH+FRACTION_WIDTH-1:FRACTION_WIDTH];	//u的整数部分
wire [KINT_WIDTH-1:0]	uIK=u[KINT_WIDTH+FRACTION_WIDTH-1:FRACTION_WIDTH];	//u的整数部分
wire [KINT_WIDTH-1:0]	uNxtIK=uNxt[KINT_WIDTH+FRACTION_WIDTH-1:FRACTION_WIDTH];//下一个时钟u的整数部分
wire [KINT_WIDTH-1:0]	uDistance=uNxtIK-uIK;	//当前u与下一个u的整数部分相差值
wire [KINT_WIDTH-1:0]	xAddrDistance=(uDistance>1)?2:uDistance;//下一时刻地址增量;//下一时刻地址跳变量

reg  [CAL_WIDTH-1:0]	v;			//对应双线性插值算法中v值
wire [CAL_WIDTH-1:0]	vNxt=v+kY;	//暂存v+ky，下一行给到v
wire [INT_WIDTH-1:0]	vI= v[INT_WIDTH+FRACTION_WIDTH-1:FRACTION_WIDTH];	//v的整数部分
wire [KINT_WIDTH-1:0]	vIK= v[KINT_WIDTH+FRACTION_WIDTH-1:FRACTION_WIDTH];	//v的整数部分
wire [KINT_WIDTH-1:0]	vNxtIK= vNxt[KINT_WIDTH+FRACTION_WIDTH-1:FRACTION_WIDTH];	//下一个v的整数部分;
wire [KINT_WIDTH-1:0]	vDistance=vNxtIK-vIK;	//当前v与下一个v的整数部分差值

wire [NUM_WIDTH-1:0] F00;		//左上角点系数
wire [NUM_WIDTH-1:0] F10;		//右上角点系数
wire [NUM_WIDTH-1:0] F01;		//左下角点系数
wire [NUM_WIDTH-1:0] F11;		//右下角点系数
reg  [ADDRESS_WIDTH-1:0] ramRdAddr;			//ram读取地址
reg	 [ADDRESS_WIDTH-1:0] xAddress;			//记录自己当前算到一行中的
reg  [ADDRESS_WIDTH-1:0] yAddress;			//记录自己算到第几行输出
reg	 [DATA_WIDTH-1:0]    dataReg10;			//工作模式2时暂存data10的数据

wire mode =(fifoNum>=2)?0:1;//FIFO中剩余行数大于等于2时，工作在模式0；否则工作在模式1。
		
//使能信号
reg	 dataReady;									//工作模式2数据已准备好标识位（仅模式1下有效
wire workEn		= (fifoNum<=1)?0:1;				//FIFO中可用剩余行数小于等于1 不允许输入
wire ptEn 		= (uNxtI<ramAddrIn)?1:0;			//输入指针小于输出指针则允许计算（仅模式1下有效）
wire outXBoundEn= ((xAddress>=0)&(xAddress<outXRes))?1:0;		//x在输出边界内
wire outYBoundEn= ((yAddress>=0)&(yAddress<outYRes))?1:0;		//y在输出边界内
wire inXBound	= (uI==inXNum)?1:0;				//x输入抵达边界
wire inYBound	= (vI==inYNum)?1:0;				//y输入抵达边界
wire enCal		= (!HS)&(!VS)&workEn&(!mode);//|(mode&dataReady&ptEn)); //模块允许计算
assign dOutEn	= outXBound&(!outYBound);		//输出使能

//读ram地址以及列累加模块
//reg	   [KINT_WIDTH-1:0]
assign ramRdAddr00 = ramRdAddr;
assign ramRdAddr01 = ramRdAddr+1;
assign ramRdAddr10 = (mode==0)?ramRdAddr:0;
					 //((mode==1)):;		 
assign ramRdAddr11 = (mode==0)?(ramRdAddr+1):'bz;//工作模式1下11地址不工作
always @(posedge clk or posedge rst)
begin
	if(rst) begin
		xAddress<=-1;
		u<=0;
		uPre<=0
		ramRdAddr<=0;
	end
	else if(VS|HS) begin
		xAddress<=-1;
		uPre<=0
		u<=0;
		ramRdAddr<=0;
	end
	else if(enCal) begin
		xAddress<=xAddress+1;
		uPre<=u;
		u<=uNxt;
		ramRdAddr<=ramRdAddr+xAddrDistance;
	end
end		

//行累加模块
always @(posedge clk or posedge rst)
begin
	if(rst) begin
		yAddress<=0;
		v<=0;
		jmp1<=0;jmp2<=0;
		HS<=0;VS<=0;
	end
	else if(outYBound)begin		//一帧输出完毕
		v<=0;
		yAddress<=0;
		HS<=0;VS<=1;
		//VS后需要弹出两个RAM,但由于VS总跟在HS之后，因此要根据HS行同步的jmp来判断VS的jmp,使两次跳变为和为2
		if(jmp2==1)	
			jmp2<=0;
	end
	else if(outXBound) begin	//一行输出完毕
		yAddress<=yAddress+1;
		v<=vNxt;
		HS<=1;
		if(vDistance>1)begin //需要跳两行
			jmp1<=0;jmp2<=1;
		end
		else if(vDistance==1)begin//需要跳一行
			jmp1<=1;jmp2<=0;
		end
		else if(vDistance==1)begin//不需要跳
			jmp1<=0;jmp2<=0;
		end
	end
	else begin				//一般状态下关闭跳变开关
		jmp1<=0;jmp2<=0;
		VS<=0;HS<=0;
	end
end	

//插值模块
//四点的数据值
wire [DATA_WIDTH-1:0]		data00=ramData00;
wire [DATA_WIDTH-1:0]		data01=(inXBound==0)?ramData01:ramData00;//处于列边界上时取00点的值
wire [DATA_WIDTH-1:0]		data10=(inYBound==0)?ramData10:ramData00;//处于行边界上时取上一行的值
wire [DATA_WIDTH-1:0]		data11=(inYBound==0)?ramData11:
								   (inXBound==0)?ramData01:ramData00;//边界处理
//系数准备
wire [FRACTION_WIDTH-1:0]	uF=uPre[FRACTION_WIDTH-1:0];	//u的小数部分
wire [FRACTION_WIDTH-1:0]	vF=v[FRACTION_WIDTH-1:0];	//v的小数部分
wire [FRACTION_WIDTH-1:0]	one=0;	//假想单位1
wire [NUM_WIDTH-1:0]		uv=uF*vF>>FRACTION_WIDTH;		//u v小数部分的乘积
//系数运算
assign F00=one-uF-vF+uv;//(1-u)*(1-v)
assign F01=uF-uv;		//u*(1-v)
assign F10=vF-uv;    	//v*(1-u)
assign F11=uv;    		//uv
//插值运算
//三通道数据读取值
wire [R_WIDTH-1:0] dR00	=data00[DATA_WIDTH-1:DATA_WIDTH-R_WIDTH];
wire [G_WIDTH-1:0] dG00	=data00[DATA_WIDTH-R_WIDTH-1:B_WIDTH];
wire [B_WIDTH-1:0] dB00	=data00[B_WIDTH-1:0];

wire [R_WIDTH-1:0] dR01	=data01[DATA_WIDTH-1:DATA_WIDTH-R_WIDTH];
wire [G_WIDTH-1:0] dG01	=data01[DATA_WIDTH-R_WIDTH-1:B_WIDTH];
wire [B_WIDTH-1:0] dB01	=data01[B_WIDTH-1:0];

wire [R_WIDTH-1:0] dR10	=(mode==0) ?data10[DATA_WIDTH-1:DATA_WIDTH-R_WIDTH]:dataReg10[DATA_WIDTH-1:DATA_WIDTH-R_WIDTH];
wire [G_WIDTH-1:0] dG10	=(mode==0) ?data10[DATA_WIDTH-R_WIDTH-1:B_WIDTH]:dataReg10[DATA_WIDTH-R_WIDTH-1:B_WIDTH];
wire [B_WIDTH-1:0] dB10	=(mode==0) ?data10[B_WIDTH-1:0]:dataReg10[B_WIDTH-1:0];
									
wire [R_WIDTH-1:0] dR11	=data11[DATA_WIDTH-1:DATA_WIDTH-R_WIDTH];
wire [G_WIDTH-1:0] dG11	=data11[DATA_WIDTH-R_WIDTH-1:B_WIDTH];
wire [B_WIDTH-1:0] dB11	=data11[B_WIDTH-1:0];


wire [R_WIDTH-1:0] dRout=(F00*dR00>>FRACTION_WIDTH)+(F01*dR01>>FRACTION_WIDTH)+(F10*dR10>>FRACTION_WIDTH)+(F11*dR11>>FRACTION_WIDTH);			
wire [G_WIDTH-1:0] dGout=(F00*dG00>>FRACTION_WIDTH)+(F01*dG01>>FRACTION_WIDTH)+(F10*dG10>>FRACTION_WIDTH)+(F11*dG11>>FRACTION_WIDTH);		
wire [B_WIDTH-1:0] dBout=(F00*dB00>>FRACTION_WIDTH)+(F01*dB01>>FRACTION_WIDTH)+(F10*dB10>>FRACTION_WIDTH)+(F11*dB11>>FRACTION_WIDTH);
assign			   dOut[DATA_WIDTH-1:DATA_WIDTH-R_WIDTH]=dRout;
assign			   dOut[DATA_WIDTH-R_WIDTH-1:B_WIDTH]=dGout;
assign			   dOut[B_WIDTH-1:0]=dBout;
endmodule